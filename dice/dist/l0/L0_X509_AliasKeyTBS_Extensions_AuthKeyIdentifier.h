/* Automatically generated by the Kremlin tool */



#ifndef __L0_X509_AliasKeyTBS_Extensions_AuthKeyIdentifier_H
#define __L0_X509_AliasKeyTBS_Extensions_AuthKeyIdentifier_H

#if defined(__cplusplus)
extern "C" {
#endif

#include "kremlin/internal/types.h"
#include "kremlin/lowstar_endianness.h"
#include "LowStar_Printf.h"
#include <string.h>


#include "L0_X509_AliasKeyTBS_Extensions_BasicConstraints.h"
#include "ASN1_X509.h"

bool filter_aliasKeyTBS_extensions_authKeyID_extValue_payload(octet_string_t x);

typedef octet_string_t aliasKeyTBS_extensions_authKeyID_extValue_payload_t;

uint32_t
serialize32_aliasKeyTBS_extensions_authKeyID_extValue_payload_backwards(
  octet_string_t x,
  uint8_t *input,
  uint32_t pos
);

uint32_t len_of_aliasKeyTBS_extensions_authKeyID_extValue_payload(octet_string_t keyID);

typedef octet_string_t aliasKeyTBS_extensions_authKeyID_extValue_t;

uint32_t
serialize32_aliasKeyTBS_extensions_authKeyID_extValue_backwards(
  octet_string_t x,
  uint8_t *b,
  uint32_t pos
);

uint32_t len_of_aliasKeyTBS_extensions_authKeyID_extValue();

typedef struct aliasKeyTBS_extensions_authKeyID_t_s
{
  K___ASN1_Base_oid_t_bool fst;
  octet_string_t snd;
}
aliasKeyTBS_extensions_authKeyID_t;

uint32_t
serialize32_aliasKeyTBS_extensions_authKeyID_backwards(
  aliasKeyTBS_extensions_authKeyID_t x,
  uint8_t *b,
  uint32_t pos
);

aliasKeyTBS_extensions_authKeyID_t
x509_get_aliasKeyTBS_extensions_authKeyID(bool criticality, octet_string_t keyID);

#if defined(__cplusplus)
}
#endif

#define __L0_X509_AliasKeyTBS_Extensions_AuthKeyIdentifier_H_DEFINED
#endif
