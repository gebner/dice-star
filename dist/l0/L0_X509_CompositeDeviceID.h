/* Automatically generated by the Kremlin tool */



#ifndef __L0_X509_CompositeDeviceID_H
#define __L0_X509_CompositeDeviceID_H

#if defined(__cplusplus)
extern "C" {
#endif

#include "kremlin/internal/types.h"
#include "kremlin/lowstar_endianness.h"
#include "LowStar_Printf.h"
#include <string.h>


#include "ASN1_X509.h"
#include "L0_X509_FWID.h"

typedef struct compositeDeviceID_payload_t_s
{
  int32_t l0_version;
  subjectPublicKeyInfo_payload_t l0_deviceID;
  fwid_payload_t l0_fwid;
}
compositeDeviceID_payload_t;

typedef compositeDeviceID_payload_t compositeDeviceID_t;

uint32_t
serialize32_compositeDeviceID_payload_backwards(
  compositeDeviceID_payload_t x,
  uint8_t *input,
  uint32_t pos
);

uint32_t
serialize32_compositeDeviceID_backwards(
  compositeDeviceID_payload_t x,
  uint8_t *b,
  uint32_t pos
);

compositeDeviceID_payload_t
x509_get_compositeDeviceID(
  int32_t version,
  FStar_Bytes_bytes deviceKeyPub,
  FStar_Bytes_bytes fwid
);

#if defined(__cplusplus)
}
#endif

#define __L0_X509_CompositeDeviceID_H_DEFINED
#endif
