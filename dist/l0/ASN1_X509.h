/* Automatically generated by the Kremlin tool */



#ifndef __ASN1_X509_H
#define __ASN1_X509_H

#if defined(__cplusplus)
extern "C" {
#endif

#include "krml/internal/types.h"
#include "krml/lowstar_endianness.h"
#include "LowStar_Printf.h"
#include <string.h>

#define OID_RIOT 0
#define OID_AT_CN 1
#define OID_AT_COUNTRY 2
#define OID_AT_ORGANIZATION 3
#define OID_CLIENT_AUTH 4
#define OID_AUTHORITY_KEY_IDENTIFIER 5
#define OID_KEY_USAGE 6
#define OID_EXTENDED_KEY_USAGE 7
#define OID_BASIC_CONSTRAINTS 8
#define OID_DIGEST_SHA256 9
#define OID_EC_ALG_UNRESTRICTED 10
#define OID_EC_GRP_SECP256R1 11
#define OID_ED25519 12
#define OID_X25519 13
#define OID_PKCS9_CSR_EXT_REQ 14

typedef uint8_t oid_t;

typedef struct bit_string_t_s
{
  uint32_t bs_len;
  uint32_t bs_unused_bits;
  FStar_Bytes_bytes bs_s;
}
bit_string_t;

typedef struct character_string_t_s
{
  uint32_t fst;
  FStar_Bytes_bytes snd;
}
character_string_t;

typedef struct octet_string_t_s
{
  uint32_t len;
  FStar_Bytes_bytes s;
}
octet_string_t;

typedef struct key_usage_t_s
{
  oid_t fst;
  int32_t snd;
}
key_usage_t;

typedef struct K___ASN1_Base_oid_t_ASN1_Base_character_string_t_s
{
  oid_t fst;
  character_string_t snd;
}
K___ASN1_Base_oid_t_ASN1_Base_character_string_t;

typedef struct x509_validity_payload_t_s
{
  FStar_Bytes_bytes notBefore;
  FStar_Bytes_bytes notAfter;
}
x509_validity_payload_t;

typedef struct subjectPublicKeyInfo_payload_t_s
{
  oid_t subjectPubKey_alg;
  bit_string_t subjectPubKey;
}
subjectPublicKeyInfo_payload_t;

#if defined(__cplusplus)
}
#endif

#define __ASN1_X509_H_DEFINED
#endif
