EVERPARSE_HOME ?= $(FSTAR_HOME)/../everparse

SHELL=/bin/bash

ifeq ($(shell uname -s),Darwin)
  ifeq (,$(shell which gsed))
    $(error gsed not found; try brew install gnu-sed)
  endif
  SED := gsed
  ifeq (,$(shell which gtime))
    $(error gtime not found; try brew install gnu-time)
  endif
  TIME := gtime
else
  SED := sed
  TIME := /usr/bin/time
endif

# A helper to generate pretty logs, callable as:
#   $(call run-with-log,CMD,TXT,STEM)
#
# Arguments:
#  CMD: command to execute (may contain double quotes, but not escaped)
#  TXT: readable text to print out once the command terminates
#  STEM: path stem for the logs, stdout will be in STEM.out, stderr in STEM.err, CMD in STEM.cmd
ifeq (,$(NOSHORTLOG))
run-with-log = \
  @echo "$(subst ",\",$1)" > $3.cmd; \
  $(TIME) -q -f '%E' -o $3.time sh -c "$(subst ",\",$1)" > $3.out 2> >( tee $3.err 1>&2 ); \
  ret=$$?; \
  time=$$(cat $3.time); \
  if [ $$ret -eq 0 ]; then \
    echo "$2, $$time"; \
  else \
    echo "<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>"; \
    echo -e "\033[31mFatal error while running\033[0m: $1"; \
    echo -e "\033[31mFailed after\033[0m: $$time"; \
    echo -e "\033[36mFull log is in $3.{out,err}, see excerpt below\033[0m:"; \
    tail -n 20 $3.err; \
    echo "<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>"; \
    false; \
  fi
else
run-with-log = $1
endif

# Helpers from hacl-star (https://github.com/project-everest/hacl-star/blob/master/Makefile)

# Transforms any foo/bar/baz.qux into $2/baz.qux
to-dir = $(addprefix $2/,$(notdir $1))

# $(call only-for,<filter>) retains all the checked files that match <filter>,
# taken from the source directories, then returns the corresponding set of
# targets in obj/. For instance, $(call only-for,$(HACL_HOME)/code/%.checked)
# returns obj/Hacl.Hash.Definitions.fst.checked, and all the other targets that
# originate from source files in code/.
#
# With this macro, we no longer rely on pattern rules for file-specific options,
# meaning we also no longer rely on the shortest stem rule. Many of the rules
# below match the same file multiple times (as we the case in the original
# SConstruct). The last match has precedence and overrides previous variable
# assignments.
find-all = $(filter $1,$(addsuffix $2,$(ALL_FSTAR_FILES)))
# only-for = $(call o-dir,$(filter $1,$(addsuffix $2,$(ALL_FSTAR_FILES))),$(OUTPUT_DIR)/)

# FStar

ifneq ($(wildcard $(KRML_HOME)/krmllib/obj/.),)
        KRML_OBJ_DIR=$(KRML_HOME)/krmllib/obj
else
        KRML_OBJ_DIR=
endif

# Includes
INCLUDES=$(FSTAR_HOME)/ulib/.cache \
  $(KRML_OBJ_DIR) \
  $(KRML_HOME)/include \
  $(KRML_HOME)/krmllib/dist/generic \
  $(HACL_HOME)/specs \
  $(HACL_HOME)/specs/lemmas \
  $(HACL_HOME)/vale/specs/hardware \
  $(HACL_HOME)/vale/specs/defs \
  $(HACL_HOME)/code/bignum \
  $(HACL_HOME)/code/meta \
  $(HACL_HOME)/code/blake2 \
  $(HACL_HOME)/code/hash \
  $(HACL_HOME)/code/hkdf \
  $(HACL_HOME)/code/hmac\
  $(HACL_HOME)/code/curve25519 \
  $(HACL_HOME)/code/ed25519 \
  $(HACL_HOME)/code/streaming \
  $(HACL_HOME)/code/sha2-mb/ \
  $(HACL_HOME)/lib \
  $(HACL_HOME)/providers/evercrypt \
  $(KRML_HOME)/krmllib \
  $(HACL_HOME)/obj \
  $(EVERPARSE_HOME)/src/lowparse \
  $(OUTPUT_DIR) \
  $(DICE_ENGINE_DIR) \
  $(RIOT_DIR) \
  $(ASN1_DIR) \
  $(X509_DIR) \
  $(TEST_DIR)

FSTAR_INCLUDES = $(addprefix --include ,$(INCLUDES))

# Hints
ifeq ($(OTHERFLAGS),$(subst --admit_smt_queries true,,$(OTHERFLAGS)))
  FSTAR_HINTS ?= --use_hints --use_hint_hashes --record_hints
else 
  FSTAR_HINTS ?= --use_hints --use_hint_hashes
endif

# Checked
ALREADY_CACHED = Prims FStar LowStar Hacl Spec Lib EverCrypt Vale C Meta LowParse

ifeq ($(shell basename "`pwd`"),dice_engine)
  FSTAR_ALREADY_CACHED = --already_cached '$(ALREADY_CACHED)'
else
ifeq ($(shell basename "`pwd`"),asn1)
  FSTAR_ALREADY_CACHED = --already_cached '$(ALREADY_CACHED)'
else
ifeq ($(shell basename "`pwd`"),x509)
  FSTAR_ALREADY_CACHED = --already_cached '$(ALREADY_CACHED)'
else
ifeq ($(shell basename "`pwd`"),l0)
  FSTAR_ALREADY_CACHED = --already_cached '$(ALREADY_CACHED)'
else
ifeq ($(shell basename "`pwd`"),test)
  FSTAR_ALREADY_CACHED = --already_cached '$(ALREADY_CACHED)'
else
  FSTAR_ALREADY_CACHED = --already_cached '$(ALREADY_CACHED)'
endif
endif
endif
endif
endif

# 272: top-level bindings must be total
# 247: checked file not written because some of its dependencies...
# 241: corrupt cache file AND stale cache file (argh!) we wish to make the
#      former fatal, and the latter non-fatal if it's the file we're about to
#      verify... see https://github.com/FStarLang/FStar/issues/1652
# 331: the name is being ignored
# 333: unable to open hints file
FSTAR_VERIFY_FLAGS = $(FSTAR_INCLUDES) \
  $(FSTAR_HINTS) \
  $(FSTAR_ALREADY_CACHED) \
  --cache_checked_modules \
  --odir $(OUTPUT_DIR) \
  --cache_dir $(OUTPUT_DIR) \
  --warn_error -272-241-247-331-333

FSTAR_EXTRACT_FLAGS = $(FSTAR_INCLUDES) \
  $(FSTAR_HINTS) \
  $(FSTAR_ALREADY_CACHED) \
  --cache_checked_modules \
  --odir $(OUTPUT_DIR) \
  --cache_dir $(OUTPUT_DIR) \
  --warn_error -272-241-247-331-333 \
  --codegen krml \
  --cmi

FSTAR = $(FSTAR_HOME)/bin/fstar.exe

# 2. KRML

KRML=$(KRML_HOME)/krml

KRML_NO_PREFIXS = \
  -no-prefix 'DICE.Engine.\*' \
  -no-prefix 'L0.\*' \
  -no-prefix 'ASN1.\*' \
  -no-prefix 'X509.\*' \
  -no-prefix 'DICE.Engine.Definitions' \
  -no-prefix 'DICE.Engine.Core' \
  -no-prefix 'DICE.Engine.Test' \
  -no-prefix 'HWAbstraction' \
  -no-prefix 'ASN1.Test' \
  -no-prefix 'ASN1.Test.Helpers' \
  -no-prefix 'L0.Base' \
  -no-prefix 'L0.Spec' \
  -no-prefix 'L0.Impl' \
  -no-prefix 'L0.Core' \
  -no-prefix 'L0.Test' \
  -no-prefix 'L0.Helpers'

ifeq ($(shell basename "`pwd`"),test)
#  KRML_LDOPTS = \
    -ldopt -lmbedcrypto \
    -ldopt -lmbedtls \
    -ldopt -lmbedx509
else
  KRML_LDOPTS =
endif
 
KRML_LIBRARIES = \
  -library HWAbstraction \
  -library L0.Declassify \
  -library ASN1.Test.Helpers \
  -library L0.Helpers

HACL_LIB=Hacl_Lib

KRML_BUNDLES = \
  -bundle DICE.Engine.Definitions \
  -bundle ASN1.*,X509.* \
  -bundle LowParse.* \
  -bundle L0.X509.LengthUtils \
  -bundle Prims,C.Failure,C,C.*,FStar.*,Hacl.*,Spec.*,Vale.*,Lib.*,LowStar.*,Meta.*[rename=$(HACL_LIB)]

KRML_MISC_FLAGS = \
  -fparentheses -fno-shadow -fcurly-braces \
  -minimal \
  -fnoreturn-else \
  -fextern-c \
  -drop Lib.IntVector.Intrinsics \
  -drop WasmSupport \
  -verbose

KRML_C_INCLUDES = \
  -add-include '"krml/internal/types.h"' \
  -add-include '"krml/lowstar_endianness.h"' \
  -add-include '"LowStar_Printf.h"' \
  -add-include '<string.h>'

KRML_FSTAR_INCLUDES = $(addprefix -I , $(INCLUDES))

ifeq ($(shell basename "`pwd`"),dice_engine)
  KRML_EXECUTABLE = dice_engine.exe
else
ifeq ($(shell basename "`pwd`"),l0)
  KRML_EXECUTABLE = l0.exe
else
ifeq ($(shell basename "`pwd`"),test)
  KRML_EXECUTABLE = test.exe
else
  KRML_EXECUTABLE = test.exe
endif
endif
endif

# @2: found a reference to a function without implementation
# @4: type error / malformed input
# -6: variable-length array (stack newbuf _ is a non-constant size,
#     stack-allocated array; this is not supported by CompCert and
#     requires the use of alloca(3) for MSVC)
# @15: function is not Low*; need compatibility headers
KRML_WARN_ERRORS = \
  -warn-error @2@4@15@17-6

OTHER_KRML_FLAGS += -header $(SRC_DIR)/krml_header.txt

KRML_FLAGS = \
  $(OTHER_KRML_FLAGS) \
  $(KRML_NO_PREFIXS) \
  $(KRML_LIBRARIES) \
  $(KRML_LDOPTS) \
  $(KRML_BUNDLES) \
  $(KRML_WARN_ERRORS) \
  $(KRML_MISC_FLAGS) \
  $(KRML_C_INCLUDES) \
  $(KRML_FSTAR_INCLUDES) \
  -tmpdir $(OUTPUT_DIR) \
  -o $(KRML_EXECUTABLE)

# C Implementations
ifeq ($(shell basename "`pwd`"),dice_engine)
  C_FILES = $(C_DIR)/HWAbstraction.c
else
ifeq ($(shell basename "`pwd`"),l0)
  C_FILES = $(C_DIR)/Declassification.c
else
ifeq ($(shell basename "`pwd`"),test)
  C_FILES = $(C_DIR)/Declassification.c $(C_DIR)/ASN1.Test.Helpers.c $(C_DIR)/L0.Helpers.c
else
  C_FILES =
endif
endif
endif