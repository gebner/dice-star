module X509.Crypto

open LowParse.Low.Base
// open LowParse.Low.Combinators

open ASN1.Spec
open ASN1.Low

open X509.Base

open FStar.Integers

(* FIXME: ZT: large structs have bad performance. *)

(* AlgorithmIdentifiers
  ======================
  NOTE: Different algorithms have identifiers in different structure.
*)

type cryptoAlg =
| ECDSA_P256
| DUMMY

(* ECDSA Prime256 SHA2 *)
noeq
type algorithmIdentifier_ECDSA_P256_t = {
  alg_id_oid_ecdsa: oid: datatype_of_asn1_type OID {oid == OID_EC_ALG_UNRESTRICTED};
  alg_id_oid_p256 : oid: datatype_of_asn1_type OID {oid == OID_EC_GRP_SECP256R1}
}

/// tuple repr
let filter_algorithmIdentifier_ECDSA_P256_t'
  (x': tuple2 (datatype_of_asn1_type OID) (datatype_of_asn1_type OID))
: GTot bool
= fst x' = OID_EC_ALG_UNRESTRICTED &&
  snd x' = OID_EC_GRP_SECP256R1

let algorithmIdentifier_ECDSA_P256_t'
= parse_filter_refine filter_algorithmIdentifier_ECDSA_P256_t'

/// tuple repr -> record repr
let synth_algorithmIdentifier_ECDSA_P256_t
  (x': algorithmIdentifier_ECDSA_P256_t')
: GTot (algorithmIdentifier_ECDSA_P256_t)
= { alg_id_oid_ecdsa = fst x';
    alg_id_oid_p256  = snd x' }

/// record repr -> tuple repr
let synth_algorithmIdentifier_ECDSA_P256_t'
  (x: algorithmIdentifier_ECDSA_P256_t)
: Tot (x': algorithmIdentifier_ECDSA_P256_t' { x == synth_algorithmIdentifier_ECDSA_P256_t x' })
= (x.alg_id_oid_ecdsa, x.alg_id_oid_p256)

/// sequence value (body) parser
let parse_algorithmIdentifier_sequence_ECDSA_P256
: parser _ algorithmIdentifier_ECDSA_P256_t
= parse_asn1_TLV_of_type OID
  `nondep_then`
  parse_asn1_TLV_of_type OID
  `parse_filter`
  filter_algorithmIdentifier_ECDSA_P256_t'
  `parse_synth`
  synth_algorithmIdentifier_ECDSA_P256_t

/// sequence value serializer
let serialize_algorithmIdentifier_sequence_ECDSA_P256
: serializer parse_algorithmIdentifier_sequence_ECDSA_P256
= serialize_synth
  (* p1 *) (parse_asn1_TLV_of_type OID
            `nondep_then`
            parse_asn1_TLV_of_type OID
            `parse_filter`
            filter_algorithmIdentifier_ECDSA_P256_t')
  (* f2 *) (synth_algorithmIdentifier_ECDSA_P256_t)
  (* s1 *) (serialize_asn1_TLV_of_type OID
            `serialize_nondep_then`
            serialize_asn1_TLV_of_type OID
            `serialize_filter`
            filter_algorithmIdentifier_ECDSA_P256_t')
  (* g1 *) (synth_algorithmIdentifier_ECDSA_P256_t')
  (* prf*) ()

/// lemma: unfold sequence value serializer
let serialize_algorithmIdentifier_sequence_ECDSA_P256_unfold
  (x: algorithmIdentifier_ECDSA_P256_t)
: Lemma (
  serialize serialize_algorithmIdentifier_sequence_ECDSA_P256 x ==
  serialize (serialize_asn1_TLV_of_type OID) x.alg_id_oid_ecdsa
  `Seq.append`
  serialize (serialize_asn1_TLV_of_type OID) x.alg_id_oid_p256
)
= serialize_nondep_then_eq
  (* s1 *) (serialize_asn1_TLV_of_type OID)
  (* s2 *) (serialize_asn1_TLV_of_type OID)
  (* in *) (synth_algorithmIdentifier_ECDSA_P256_t' x);
  serialize_synth_eq
  (* p1 *) (parse_asn1_TLV_of_type OID
            `nondep_then`
            parse_asn1_TLV_of_type OID
            `parse_filter`
            filter_algorithmIdentifier_ECDSA_P256_t')
  (* f2 *) (synth_algorithmIdentifier_ECDSA_P256_t)
  (* s1 *) (serialize_asn1_TLV_of_type OID
            `serialize_nondep_then`
            serialize_asn1_TLV_of_type OID
            `serialize_filter`
            filter_algorithmIdentifier_ECDSA_P256_t')
  (* g1 *) (synth_algorithmIdentifier_ECDSA_P256_t')
  (* prf*) ()
  (* in *) x

/// lemma: reveal sequence serialization size
let serialize_algorithmIdentifier_sequence_ECDSA_P256_size
  (x: algorithmIdentifier_ECDSA_P256_t)
: Lemma (
  Seq.length (serialize serialize_algorithmIdentifier_sequence_ECDSA_P256 x) ==
  length_of_asn1_primitive_TLV x.alg_id_oid_ecdsa +
  length_of_asn1_primitive_TLV x.alg_id_oid_p256
)
= serialize_algorithmIdentifier_sequence_ECDSA_P256_unfold x

/// inbound record repr
let algorithmIdentifier_ECDSA_P256_t_inbound
= inbound_sequence_value_of serialize_algorithmIdentifier_sequence_ECDSA_P256


/// TLV
///
let parse_algorithmIdentifier_sequence_TLV_ECDSA_P256
: parser _ algorithmIdentifier_ECDSA_P256_t_inbound
= parse_asn1_sequence_TLV serialize_algorithmIdentifier_sequence_ECDSA_P256

let serialize_algorithmIdentifier_sequence_TLV_ECDSA_P256
: serializer parse_algorithmIdentifier_sequence_TLV_ECDSA_P256
= serialize_asn1_sequence_TLV serialize_algorithmIdentifier_sequence_ECDSA_P256

let lemma_serialize_algorithmIdentifier_sequence_TLV_ECDSA_P256_unfold
= lemma_serialize_asn1_sequence_TLV_unfold serialize_algorithmIdentifier_sequence_ECDSA_P256

let lemma_serialize_algorithmIdentifier_sequence_TLV_ECDSA_P256_size
= lemma_serialize_asn1_sequence_TLV_size serialize_algorithmIdentifier_sequence_ECDSA_P256

/// Low
///

inline_for_extraction
let serialize32_algorithmIdentifier_sequence_ECDSA_P256_backwards
: serializer32_backwards serialize_algorithmIdentifier_sequence_ECDSA_P256
= serialize32_synth_backwards
  (* ls *) (serialize32_asn1_TLV_backwards_of_type OID
            `serialize32_nondep_then_backwards`
            serialize32_asn1_TLV_backwards_of_type OID
            `serialize32_filter_backwards`
            filter_algorithmIdentifier_ECDSA_P256_t')
  (* f2 *) (synth_algorithmIdentifier_ECDSA_P256_t)
  (* g1 *) (synth_algorithmIdentifier_ECDSA_P256_t')
  (* g1'*) (synth_algorithmIdentifier_ECDSA_P256_t')
  (* prf*) ()

let serialize32_algorithmIdentifier_sequence_TLV_ECDSA_P256_backwards
: serializer32_backwards serialize_algorithmIdentifier_sequence_TLV_ECDSA_P256
= serialize32_asn1_sequence_TLV_backwards
  (* ls *) (serialize32_algorithmIdentifier_sequence_ECDSA_P256_backwards)

///--------------------------------------------


(* ECDSA Prime256 SHA2 *)
noeq
type algorithmIdentifier_DUMMY_t = {
  alg_id_oid_ecdsa: oid: datatype_of_asn1_type OID {oid == OID_EC_ALG_UNRESTRICTED};
  alg_id_oid_p256 : oid: datatype_of_asn1_type OID {oid == OID_EC_GRP_SECP256R1}
}

/// tuple repr
let filter_algorithmIdentifier_DUMMY_t'
  (x': tuple2 (datatype_of_asn1_type OID) (datatype_of_asn1_type OID))
: GTot bool
= fst x' = OID_EC_ALG_UNRESTRICTED &&
  snd x' = OID_EC_GRP_SECP256R1

let algorithmIdentifier_DUMMY_t'
= parse_filter_refine filter_algorithmIdentifier_DUMMY_t'

/// tuple repr -> record repr
let synth_algorithmIdentifier_DUMMY_t
  (x': algorithmIdentifier_DUMMY_t')
: GTot (algorithmIdentifier_DUMMY_t)
= { alg_id_oid_ecdsa = fst x';
    alg_id_oid_p256  = snd x' }

/// record repr -> tuple repr
let synth_algorithmIdentifier_DUMMY_t'
  (x: algorithmIdentifier_DUMMY_t)
: Tot (x': algorithmIdentifier_DUMMY_t' { x == synth_algorithmIdentifier_DUMMY_t x' })
= (x.alg_id_oid_ecdsa, x.alg_id_oid_p256)

/// sequence value (body) parser
let parse_algorithmIdentifier_sequence_DUMMY
: parser _ algorithmIdentifier_DUMMY_t
= parse_asn1_TLV_of_type OID
  `nondep_then`
  parse_asn1_TLV_of_type OID
  `parse_filter`
  filter_algorithmIdentifier_DUMMY_t'
  `parse_synth`
  synth_algorithmIdentifier_DUMMY_t

/// sequence value serializer
let serialize_algorithmIdentifier_sequence_DUMMY
: serializer parse_algorithmIdentifier_sequence_DUMMY
= serialize_synth
  (* p1 *) (parse_asn1_TLV_of_type OID
            `nondep_then`
            parse_asn1_TLV_of_type OID
            `parse_filter`
            filter_algorithmIdentifier_DUMMY_t')
  (* f2 *) (synth_algorithmIdentifier_DUMMY_t)
  (* s1 *) (serialize_asn1_TLV_of_type OID
            `serialize_nondep_then`
            serialize_asn1_TLV_of_type OID
            `serialize_filter`
            filter_algorithmIdentifier_DUMMY_t')
  (* g1 *) (synth_algorithmIdentifier_DUMMY_t')
  (* prf*) ()

/// lemma: unfold sequence value serializer
let serialize_algorithmIdentifier_sequence_DUMMY_unfold
  (x: algorithmIdentifier_DUMMY_t)
: Lemma (
  serialize serialize_algorithmIdentifier_sequence_DUMMY x ==
  serialize (serialize_asn1_TLV_of_type OID) x.alg_id_oid_ecdsa
  `Seq.append`
  serialize (serialize_asn1_TLV_of_type OID) x.alg_id_oid_p256
)
= serialize_nondep_then_eq
  (* s1 *) (serialize_asn1_TLV_of_type OID)
  (* s2 *) (serialize_asn1_TLV_of_type OID)
  (* in *) (synth_algorithmIdentifier_DUMMY_t' x);
  serialize_synth_eq
  (* p1 *) (parse_asn1_TLV_of_type OID
            `nondep_then`
            parse_asn1_TLV_of_type OID
            `parse_filter`
            filter_algorithmIdentifier_DUMMY_t')
  (* f2 *) (synth_algorithmIdentifier_DUMMY_t)
  (* s1 *) (serialize_asn1_TLV_of_type OID
            `serialize_nondep_then`
            serialize_asn1_TLV_of_type OID
            `serialize_filter`
            filter_algorithmIdentifier_DUMMY_t')
  (* g1 *) (synth_algorithmIdentifier_DUMMY_t')
  (* prf*) ()
  (* in *) x

/// lemma: reveal sequence serialization size
let serialize_algorithmIdentifier_sequence_DUMMY_size
  (x: algorithmIdentifier_DUMMY_t)
: Lemma (
  Seq.length (serialize serialize_algorithmIdentifier_sequence_DUMMY x) ==
  length_of_asn1_primitive_TLV x.alg_id_oid_ecdsa +
  length_of_asn1_primitive_TLV x.alg_id_oid_p256
)
= serialize_algorithmIdentifier_sequence_DUMMY_unfold x

/// inbound record repr
let algorithmIdentifier_DUMMY_t_inbound
= inbound_sequence_value_of serialize_algorithmIdentifier_sequence_DUMMY


/// TLV
///
let parse_algorithmIdentifier_sequence_TLV_DUMMY
: parser _ algorithmIdentifier_DUMMY_t_inbound
= parse_asn1_sequence_TLV serialize_algorithmIdentifier_sequence_DUMMY

let serialize_algorithmIdentifier_sequence_TLV_DUMMY
: serializer parse_algorithmIdentifier_sequence_TLV_DUMMY
= serialize_asn1_sequence_TLV serialize_algorithmIdentifier_sequence_DUMMY

let lemma_serialize_algorithmIdentifier_sequence_TLV_DUMMY_unfold
= lemma_serialize_asn1_sequence_TLV_unfold serialize_algorithmIdentifier_sequence_DUMMY

let lemma_serialize_algorithmIdentifier_sequence_TLV_DUMMY_size
= lemma_serialize_asn1_sequence_TLV_size serialize_algorithmIdentifier_sequence_DUMMY

/// Low
///

inline_for_extraction
let serialize32_algorithmIdentifier_sequence_DUMMY_backwards
: serializer32_backwards serialize_algorithmIdentifier_sequence_DUMMY
= serialize32_synth_backwards
  (* ls *) (serialize32_asn1_TLV_backwards_of_type OID
            `serialize32_nondep_then_backwards`
            serialize32_asn1_TLV_backwards_of_type OID
            `serialize32_filter_backwards`
            filter_algorithmIdentifier_DUMMY_t')
  (* f2 *) (synth_algorithmIdentifier_DUMMY_t)
  (* g1 *) (synth_algorithmIdentifier_DUMMY_t')
  (* g1'*) (synth_algorithmIdentifier_DUMMY_t')
  (* prf*) ()

let serialize32_algorithmIdentifier_sequence_TLV_DUMMY_backwards
: serializer32_backwards serialize_algorithmIdentifier_sequence_TLV_DUMMY
= serialize32_asn1_sequence_TLV_backwards
  (* ls *) (serialize32_algorithmIdentifier_sequence_DUMMY_backwards)

//---------------------------------------------

(* Interface to AlgorithmIdentifiers *)
/// Record repr
unfold
let algorithmIdentifier_of
  (alg: cryptoAlg)
: Type0
= match alg with
  | ECDSA_P256 -> algorithmIdentifier_ECDSA_P256_t
  | DUMMY      -> algorithmIdentifier_DUMMY_t

/// Inbound record repr
unfold
let algorithmIdentifier_inbound_of
  (alg: cryptoAlg)
: Type0
= match alg with
  | ECDSA_P256 -> algorithmIdentifier_ECDSA_P256_t_inbound
  | DUMMY      -> algorithmIdentifier_DUMMY_t_inbound

let parse_algorithmIdentifier_sequence_kind_of
  (alg: cryptoAlg)
: parser_kind
= match alg with
  | ECDSA_P256 -> (parse_filter_kind (parse_asn1_TLV_kind_of_type OID
                                      `and_then_kind`
                                      parse_asn1_TLV_kind_of_type OID))
  | DUMMY      -> (parse_filter_kind (parse_asn1_TLV_kind_of_type OID
                                      `and_then_kind`
                                      parse_asn1_TLV_kind_of_type OID))

/// Sequence value (body) parser
unfold
let parse_algorithmIdentifier_sequence_of
  (alg: cryptoAlg)
: parser (parse_algorithmIdentifier_sequence_kind_of alg) (algorithmIdentifier_of alg)
= match alg with
  | ECDSA_P256 -> parse_algorithmIdentifier_sequence_ECDSA_P256
  | DUMMY      -> parse_algorithmIdentifier_sequence_DUMMY

/// Sequence value (body) serialzier
unfold
let serialize_algorithmIdentifier_sequence_of
  (alg: cryptoAlg)
: serializer (parse_algorithmIdentifier_sequence_of alg)
= match alg with
  | ECDSA_P256 -> serialize_algorithmIdentifier_sequence_ECDSA_P256
  | DUMMY      -> serialize_algorithmIdentifier_sequence_DUMMY

/// Sequence TLV parser
unfold
let parse_algorithmIdentifier_sequence_TLV_of
  (alg: cryptoAlg)
: parser (parse_asn1_sequence_TLV_kind) (algorithmIdentifier_inbound_of alg)
= match alg with
  | ECDSA_P256 -> parse_algorithmIdentifier_sequence_TLV_ECDSA_P256
  | DUMMY      -> parse_algorithmIdentifier_sequence_TLV_DUMMY

/// Sequence TLV serializer
unfold
let serialize_algorithmIdentifier_sequence_TLV_of
  (alg: cryptoAlg)
: serializer (parse_algorithmIdentifier_sequence_TLV_of alg)
= match alg with
  | ECDSA_P256 -> serialize_algorithmIdentifier_sequence_TLV_ECDSA_P256

unfold
let serialize32_algorithmIdentifier_sequence_backwards_of
  (alg: cryptoAlg)
: serializer32_backwards (serialize_algorithmIdentifier_sequence_of alg)
= match alg with
  | ECDSA_P256 -> serialize32_algorithmIdentifier_sequence_ECDSA_P256_backwards

unfold
let serialize32_algorithmIdentifier_sequence_TLV_backwards_of
  (alg: cryptoAlg)
// : serializer32_backwards (serialize_algorithmIdentifier_sequence_TLV_of alg)
= match alg with
  | ECDSA_P256 -> serialize32_algorithmIdentifier_sequence_TLV_ECDSA_P256_backwards


(* SubjectPublicKeyInfo
  ======================
*)
/// Record repr
noeq
type subjectPublicKeyInfo_t_of (alg: cryptoAlg) = {
  subjectPubKey_alg : algorithmIdentifier_inbound_of alg;
  subjectPubKey     : datatype_of_asn1_type BIT_STRING
}

/// tuple repr
let subjectPublicKeyInfo_t'_of
  (alg: cryptoAlg)
= tuple2
  (algorithmIdentifier_inbound_of alg)
  (datatype_of_asn1_type BIT_STRING)

let synth_subjectPublicKeyInfo_t_of
  (alg: cryptoAlg)
  (x': subjectPublicKeyInfo_t'_of alg)
: GTot (subjectPublicKeyInfo_t_of alg)
= { subjectPubKey_alg = fst x';
    subjectPubKey     = snd x' }

let synth_subjectPublicKeyInfo_t'_of
  (alg: cryptoAlg)
  (x: subjectPublicKeyInfo_t_of alg)
: Tot (x': subjectPublicKeyInfo_t'_of alg{ x == synth_subjectPublicKeyInfo_t_of alg x' })
= (x.subjectPubKey_alg , x.subjectPubKey)

let parse_subjectPublicKeyInfo_value_of
  (alg: cryptoAlg)
: parser _ (subjectPublicKeyInfo_t_of alg)
= parse_algorithmIdentifier_sequence_TLV_of alg
  `nondep_then`
  parse_asn1_TLV_of_type BIT_STRING
  `parse_synth`
  synth_subjectPublicKeyInfo_t_of alg

let serialize_subjectPublicKeyInfo_value_of
  (alg: cryptoAlg)
: serializer (parse_subjectPublicKeyInfo_value_of alg)
= serialize_synth
  (* p1 *) (parse_algorithmIdentifier_sequence_TLV_of alg
            `nondep_then`
            parse_asn1_TLV_of_type BIT_STRING)
  (* f2 *) (synth_subjectPublicKeyInfo_t_of alg)
  (* s1 *) (serialize_algorithmIdentifier_sequence_TLV_of alg
            `serialize_nondep_then`
            serialize_asn1_TLV_of_type BIT_STRING)
  (* g1 *) (synth_subjectPublicKeyInfo_t'_of alg)
  (* prf*) ()

let serialize_subjectPublicKeyInfo_value_unfold_of
  (alg: cryptoAlg)
  (x: subjectPublicKeyInfo_t_of alg)
: Lemma (
  serialize (serialize_subjectPublicKeyInfo_value_of alg) x ==
  serialize (serialize_algorithmIdentifier_sequence_TLV_of alg) x.subjectPubKey_alg
  `Seq.append`
  serialize (serialize_asn1_TLV_of_type BIT_STRING) x.subjectPubKey
)
= serialize_nondep_then_eq
  (* s1 *) (serialize_algorithmIdentifier_sequence_TLV_of alg)
  (* s2 *) (serialize_asn1_TLV_of_type BIT_STRING)
  (* in *) (synth_subjectPublicKeyInfo_t'_of alg x);
  serialize_synth_eq
  (* p1 *) (parse_algorithmIdentifier_sequence_TLV_of alg
            `nondep_then`
            parse_asn1_TLV_of_type BIT_STRING)
  (* f2 *) (synth_subjectPublicKeyInfo_t_of alg)
  (* s1 *) (serialize_algorithmIdentifier_sequence_TLV_of alg
            `serialize_nondep_then`
            serialize_asn1_TLV_of_type BIT_STRING)
  (* g1 *) (synth_subjectPublicKeyInfo_t'_of alg)
  (* prf*) ()
  (* in *) x

(* NOTE: Define the `inbound` version of value type after we defined then serializer. *)
let subjectPublicKeyInfo_t_inbound_of
  (alg: cryptoAlg)
= inbound_sequence_value_of (serialize_subjectPublicKeyInfo_value_of alg)


/// TLV
///
let parse_subjectPublicKeyInfo_seqence_TLV_of
  (alg: cryptoAlg)
: parser _ (subjectPublicKeyInfo_t_inbound_of alg)
= parse_asn1_sequence_TLV (serialize_subjectPublicKeyInfo_value_of alg)

let serialize_subjectPublicKeyInfo_sequence_TLV_of
  (alg: cryptoAlg)
: serializer (parse_subjectPublicKeyInfo_seqence_TLV_of alg)
= serialize_asn1_sequence_TLV (serialize_subjectPublicKeyInfo_value_of alg)
(*)
let serialize_subjectPublicKeyInfo_sequence_TLV_unfold_of
  (alg: cryptoAlg)
= lemma_serialize_asn1_sequence_TLV_unfold (serialize_subjectPublicKeyInfo_value_of alg)

let serialize_subjectPublicKeyInfo_sequence_TLV_size_of
  (alg: cryptoAlg)
= lemma_serialize_asn1_sequence_TLV_size (serialize_subjectPublicKeyInfo_value_of alg)

/// Low
///
(*)
inline_for_extraction
let serialize32_subjectPublicKeyInfo_value_of_backwards
  (alg: cryptoAlg)
: serializer32_backwards (serialize_subjectPublicKeyInfo_value_of alg)
= admit()
  // serialize32_synth_backwards
  // (* ls *) (serialize32_algorithmIdentifier_sequence_TLV_of_backwards alg
  //           `serialize32_nondep_then_backwards`
  //           serialize32_asn1_TLV_backwards_of_type BIT_STRING)
  // (* f2 *) (synth_subjectPublicKeyInfo_t_of alg)
  // (* g1 *) (synth_subjectPublicKeyInfo_t'_of alg)
  // (* g1'*) (synth_subjectPublicKeyInfo_t'_of alg)
  // (* prf*) ()

let serialize32_subjectPublicKeyInfo_sequence_TLV_backwards
  (alg: cryptoAlg)
= admit ()
  // serialize32_asn1_sequence_TLV_backwards
  // (* ls *) (serialize32_subjectPublicKeyInfo_value_of_backwards alg)
  // (*flen*) (len_of_subjectPublicKeyInfo_value_inbound_of alg)
